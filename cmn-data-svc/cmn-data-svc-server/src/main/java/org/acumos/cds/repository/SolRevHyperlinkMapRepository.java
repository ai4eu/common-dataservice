/*-
 * ===============LICENSE_START=======================================================
 * Acumos
 * ===================================================================================
 * Copyright (C) 2017 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
 * ===================================================================================
 * This Acumos software file is distributed by AT&T and Tech Mahindra
 * under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * This file is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ===============LICENSE_END=========================================================
 */

package org.acumos.cds.repository;

import org.acumos.cds.domain.MLPSolRevHyperlinkMap;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.transaction.annotation.Transactional;

public interface SolRevHyperlinkMapRepository extends CrudRepository<MLPSolRevHyperlinkMap, MLPSolRevHyperlinkMap.SolRevHyperlinkMapPK> {

	/**
	 * Finds all mapping entries for the specified solution revision ID.
	 *
	 * Generated by Spring magic.
	 * 
	 * @param revisionId
	 *                     Solution revision ID
	 * @return Iterable of map objects
	 */
	Iterable<MLPSolRevHyperlinkMap> findByRevisionId(@Param("revisionId") String revisionId);
	
	/**
	 * Finds all mapping entries for the specified hyperlink ID.
	 *
	 * Generated by Spring magic.
	 * 
	 * @param hyperlinkId
	 *                     Hyperlink ID
	 * @return Iterable of map objects
	 */
	Iterable<MLPSolRevHyperlinkMap> findByHyperlinkId(@Param("hyperlinkId") String hyperlinkId);

	/**
	 * Deletes all mapping entries for the specified solution revision ID.
	 * 
	 * Generated by Spring magic.
	 * 
	 * @param revisionId
	 *                     Solution revision ID
	 */
	@Modifying
	@Transactional // throws exception without this
	void deleteByRevisionId(@Param("revisionId") String revisionId);

	/**
	 * Deletes all mapping entries for the specified hyperlink ID.
	 * 
	 * Generated by Spring magic.
	 * 
	 * @param hyperlinkId
	 *                    Hyperlink ID
	 */
	@Modifying
	@Transactional // throws exception without this
	void deleteByHyperlinkId(@Param("hyperlinkId") String hyperlinkId);

}
