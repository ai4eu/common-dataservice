/*-
 * ===============LICENSE_START=======================================================
 * Acumos
 * ===================================================================================
 * Copyright (C) 2017 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
 * ===================================================================================
 * This Acumos software file is distributed by AT&T and Tech Mahindra
 * under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  
 *      http://www.apache.org/licenses/LICENSE-2.0
 *  
 * This file is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ===============LICENSE_END=========================================================
 */

package org.acumos.cds.repository;

import org.acumos.cds.domain.MLPSolutionRevision;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.PagingAndSortingRepository;
import org.springframework.data.repository.query.Param;

public interface SolutionRevisionRepository extends PagingAndSortingRepository<MLPSolutionRevision, String> {

	/**
	 * Finds solution revisions for the specified solution IDs.
	 * 
	 * Generated by Spring magic.
	 * 
	 * Not defined as pageable because the number of revisions for a solution is
	 * expected to be modest.
	 * 
	 * @param solutionIds
	 *                        Array of solution IDs
	 * @return Iterable of MLPSolutionRevision
	 */
	Iterable<MLPSolutionRevision> findBySolutionIdIn(@Param("solutionIds") String[] solutionIds);

	/**
	 * Gets all solution revisions associated with the specified artifact.
	 *
	 * This does not accept a pageable parameter because the number of revisions for
	 * a single artifact is expected to be modest.
	 * 
	 * @param artifactId
	 *                       artifact ID
	 * @return Iterable of MLPSolutionRevision
	 */
	@Query(value = "select r from MLPSolutionRevision r, MLPSolRevArtMap m " //
			+ " where r.revisionId =  m.revisionId " //
			+ " and m.artifactId = :artifactId")
	Iterable<MLPSolutionRevision> findByArtifactId(@Param("artifactId") String artifactId);

	/**
	 * Gets all solution revisions associated with the specified hyperlink.
	 *  
	 * @param hyperlinkId
	 *                       Hyperlink ID
	 * @return Iterable of MLPSolutionRevision
	 */
	@Query(value = "select r from MLPSolutionRevision r, MLPSolRevHyperlinkMap m " //
			+ " where r.revisionId =  m.revisionId " //
			+ " and m.hyperlinkId = :hyperlinkId")
	Iterable<MLPSolutionRevision> findByHyperlinkId(@Param("hyperlinkId") String hyperlinkId);

	/**
	 * Gets all solution revisions associated with the specified source solution revision id.
	 * 
	 * @param sourceId
	 *                       Source solution revision ID
	 * @return Iterable of MLPSolutionRevision
	 */
	@Query(value = "select r from MLPSolutionRevision r, MLPSourceRevTargetRevMap m " //
			+ " where r.revisionId =  m.targetId " //
			+ " and m.sourceId = :sourceId")
	Iterable<MLPSolutionRevision> findBySourceId(@Param("sourceId") String sourceId);

	/**
	 * Gets all solution revisions associated with the specified target solution revision id.
	 * 
	 * @param targetId
	 *                       Target solution revision ID
	 * @return Iterable of MLPSolutionRevision
	 */
	@Query(value = "select r from MLPSolutionRevision r, MLPSourceRevTargetRevMap m " //
			+ " where r.revisionId =  m.sourceId " //
			+ " and m.targetId = :targetId")
	Iterable<MLPSolutionRevision> findByTargetId(@Param("targetId") String targetId);
}
